#!/usr/bin/env python

import os
import sys
import argparse
import tempfile
import xmlrpclib
import re

PYPI_ENDPOINT = "http://pypi.python.org/pypi"

def build_formula(package_info):
    name = package_info['data']['name']
    filename = "%s/%s.rb" % (tempfile.gettempdir(), name)
    klass = "".join(map(str.capitalize, re.findall('[a-zA-Z]+', name)))

    with open(filename, 'w') as fp:
        formula = """require 'formula'

class PipFormula < Formula
  class NoopDownloadStrategy < AbstractDownloadStrategy
    def fetch; end
    def stage; end
  end

  def download_strategy
    NoopDownloadStrategy
  end

  def install
    system "pip", "install", "#{name}==#{version}",
      "--install-option=--prefix=#{prefix}",
      "--install-option=--install-scripts=#{prefix}/share/python"
  end
end

class %(klass)s < PipFormula
  url "%(url)s"
  version "%(version)s"
  homepage "%(homepage)s"
end
"""
        info = dict(url=package_info['urls']['url'],
                    version=package_info['data']['version'],
                    homepage=package_info['data']['home_page'],
                    klass=klass)

        fp.write(formula % info)

    return filename

def get_package_info(package):
    """
    Return a dictionary of relevant info for the package.
    """
    client = xmlrpclib.ServerProxy(PYPI_ENDPOINT)

    if '==' in package:
        (package, version) = package.split('==')
    else:
        releases = client.package_releases(package)
        if not releases:
            sys.stderr.write("Couldn't find any packages named '%s'\n" % package)
            sys.exit(1)
        version = releases[0]

    return dict(urls=client.release_urls(package, version)[0],
                data=client.release_data(package, version))

def install_or_upgrade(args):
    package_info = get_package_info(args.package)
    filename = build_formula(package_info)
    verbose = "-v" if args.verbose else ""
    os.system("brew %s %s %s" % (args.action, verbose, filename))
    os.remove(filename)

def remove(args):
    os.system("brew unlink %s %s" % ("-v" if args.verbose else "", args.package))
    os.system("brew rm %s %s" % ("-v" if args.verbose else "", args.package))

parser = argparse.ArgumentParser(prog='brew pip')
parser.add_argument("-v", "--verbose", action="store_true", default=False, help="be verbose")
subparsers = parser.add_subparsers(dest="action")

remove_parser = subparsers.add_parser('remove', help="unlink and remove the package")
remove_parser.set_defaults(func=remove)

install_parser = subparsers.add_parser('install', help="install the package")
install_parser.set_defaults(func=install_or_upgrade)

upgrade_parser = subparsers.add_parser('upgrade', help="upgrade the package")
upgrade_parser.set_defaults(func=install_or_upgrade)

parser.add_argument("package", help="name of the package to install")
args = parser.parse_args()

args.func(args)
