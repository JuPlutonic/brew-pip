#!/usr/bin/env python

import re
import os
import sys
import argparse
import xmlrpclib

PYPI_ENDPOINT = "http://pypi.python.org/pypi"
HOMEBREW_CELLAR = os.environ.get("HOMEBREW_CELLAR", "/usr/local/Cellar")

def get_cache_dir():
    """
    Return location to store pip downloads

    Try PIP_DOWNLOAD_CACHE first, then HOMEBREW_CACHE.
    """
    for var in ['PIP_DOWNLOAD_CACHE', 'HOMEBREW_CACHE']:
        if var in os.environ:
            return os.environ[var]

def get_package_info(package):
    """
    Return (package_name, version) for a given package.

    If the version isn't specified in package, query PyPI for the
    latest.

    >>> get_package_info('Django==1.2')
    ('django', '1.2')
    >>> get_package_info('django')
    ('django', '1.3.1')
    >>> get_package_info('~/src/transmissionrpc/dist/transmission-0.9.tar.gz')
    ('transmissionrpc', '0.9')
    """
    if '==' in package:
        (package, version) = package.split('==')
    elif os.path.isfile(os.path.expanduser(package)):
        base = os.path.basename(package)
        result = re.search('^(?P<package>[^-]+)-(?P<version>.+).(tar|zip)', base)
        if result:
            package = result.group('package')
            version = result.group('version')
    else:
        client = xmlrpclib.ServerProxy(PYPI_ENDPOINT)
        releases = client.package_releases(package)
        if not releases:
            if package.islower():
                # Try again capitalizing it
                return get_package_info(package.capitalize())
            else:
                sys.stderr.write("Couldn't find any packages named '%s'\n" % package)
                sys.exit(1)
        else:
            version = releases[0]
    # Lowercase the package name for consistency sake
    return (package.lower(), str(version))

def main(args):
    for package in args.package:
        (package_name, version) = get_package_info(package)

        if args.upgrade:
            os.system("brew rm %s" % package_name)

        prefix = os.path.join(HOMEBREW_CELLAR, package_name, version)
        cache = get_cache_dir()

        if os.path.isfile(os.path.expanduser(package)):
            install = package
        else:
            install = "%s==%s" % (package_name, version)

        cmd = ["pip", "install",
               "-v" if args.verbose else "",
               install,
               "--download-cache=%s" % cache if cache else "",
               "--install-option=--prefix=%s" % prefix,
               "--install-option=--install-scripts=%s" % os.path.join(prefix, "share", "python")]

        if args.verbose:
            print " ".join(cmd)

        os.system(" ".join(cmd))

        if not args.keg_only:
            os.system("brew link %s" % package_name)

parser = argparse.ArgumentParser(prog='brew pip')
parser.add_argument("-v", "--verbose", action="store_true", default=False, help="be verbose")
parser.add_argument("-k", "--keg-only", action="store_true", default=False, help="don't link files into prefix")
parser.add_argument("-u", "--upgrade", action="store_true", default=False, help="upgrade the package")
parser.add_argument("package", nargs='+', help="name of the package(s) to install")
main(parser.parse_args())
